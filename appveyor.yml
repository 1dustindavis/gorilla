version: gorilla-appveyor-{build}
branches:
  only:
  - master
clone_folder: c:\gopath\src\github.com\1dustindavis\gorilla
environment:
  GOPATH: c:\gopath
  GO111MODULE: on
install:
- ps: >-
    # Define build variables

    $APP_NAME = "gorilla"

    $VERSION = git describe --tags --always --dirty

    $BRANCH = $env:APPVEYOR_REPO_BRANCH

    $NOW = Get-Date -format s

    $REVISION = git rev-parse HEAD

    $GOVERSION = (go version).Split()[2]


    Set-AppveyorBuildVariable -Name "gorilla_app_name" -Value $APP_NAME

    Set-AppveyorBuildVariable -Name "gorilla_version" -Value $VERSION

    Set-AppveyorBuildVariable -Name "gorilla_branch" -Value $BRANCH

    Set-AppveyorBuildVariable -Name "gorilla_now" -Value $NOW

    Set-AppveyorBuildVariable -Name "gorilla_revision" -Value $REVISION

    Set-AppveyorBuildVariable -Name "gorilla_goversion" -Value $
- cmd: >-
    rem go get must be ran from cmd because AppVeyor uses remote Powershell sessions

    rem which treat any stderr output as a NativeCommandError

    go get -d ./...
build_script:
- ps: >-
    $BUILD_VERSION = "-X github.com/1dustindavis/gorilla/pkg/version.appName=$env:gorilla_app_name " +
                    "-X github.com/1dustindavis/gorilla/pkg/version.version=$env:gorilla_version " +
                    "-X github.com/1dustindavis/gorilla/pkg/version.branch=$env:gorilla_branch " +
                    "-X github.com/1dustindavis/gorilla/pkg/version.buildDate=$env:gorilla_now " +
                    "-X github.com/1dustindavis/gorilla/pkg/version.revision=$env:gorilla_revision " +
                    "-X github.com/1dustindavis/gorilla/pkg/version.goVersion=$env:gorilla_goversion"

    # Make our build directory and run the build command

    mkdir build > $null

    go build -i -o build/gorilla.exe -ldflags $BUILD_VERSION ./cmd/gorilla

    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
test_script:
- ps: >-
    # Add the go bin directory to the path

    $env:Path += ";C:\go\bin;C:\mingw-w64\x86_64-7.3.0-posix-seh-rt_v5-rev0\mingw64\bin"


    # Error if gofmt returns anything

    If (gofmt -l .) {
        Write-Error "Repo contains improperly formatted go files; run gofmt -w *.go"
    }

    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }


    # Run go vet

    go vet ./...

    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }


    # Run tests

    go test -cover -race ./...
artifacts:
- path: build/gorilla.exe
  name: gorilla_build
deploy: off